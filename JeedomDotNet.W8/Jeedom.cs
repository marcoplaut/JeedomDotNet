using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using JeedomDotNet.Core;
using JeedomDotNet.Entities;

namespace JeedomDotNet
{
    public class Jeedom
    {
        // Define a delegate named LogHandler, which will encapsulate
        // any method that takes a string as the parameter and returns no value
        public delegate void LogHandler(string message);

        // Define an Event based on the above Delegate
        public event LogHandler OnResponse;

        // By Default, create an Log method, to call the Event
        internal void Log(string message)
        {
            if (OnResponse != null)
            {
                OnResponse(message);
            }
        }

        public enum ScenarioType
        {
            Start,
            Stop,
            Enable,
            Disable
        }

        public JeedomEntities Entities { get { return _entities; } }

        public string Version { get { return this._version; } }
        public string Error { get { return _error; } }
        public bool Loaded { get { return _loaded; } }

        private JeedomEntities _entities;

        internal string _url;
        internal string _api_key;
        internal bool _allowSelfSignedCert;

        private string _host;
        private int _port;
        private bool _usessl;
        private string _path = "";
        private string _version;
        private string _error;
        private bool _loaded;
        private bool _hasError;

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, string apiKey, bool usessl = false, bool allow_self_signed_cert = false) : this(host, "", usessl ? 443 : 80, apiKey, usessl, allow_self_signed_cert)
        {
        }

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="path">Additionnal path on the Jeedom server</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, string path, string apiKey, bool usessl = false, bool allow_self_signed_cert = false) : this(host, path, usessl ? 443 : 80, apiKey, usessl, allow_self_signed_cert)
        {
        }

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="port">Port used for Jeedom connection
        /// Standard port is 80 for HTTP and 443 for HTTPS</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, int port, string apiKey, bool usessl = false, bool allow_self_signed_cert = false) : this(host, "", port, apiKey, usessl, allow_self_signed_cert)
        {
        }

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="path">Additionnal path on the Jeedom server</param>
        /// <param name="port">Port used for Jeedom connection
        /// Standard port is 80 for HTTP and 443 for HTTPS</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, string path, int port, string apiKey, bool usessl = false, bool allow_self_signed_cert = false)
        {
            _host = host;
            _path = path;
            _port = port;
            _api_key = apiKey;
            _usessl = usessl;
            _allowSelfSignedCert = allow_self_signed_cert;
        }

        /// <summary>
        /// Initialise the connection string and sets up Jeedom variables
        /// </summary>
        public void Load()
        {
            _url = new UriBuilder(_usessl ? "https" : "http", _host, _port, _path + "/core/api/jeeApi.php").ToString();

            getVersion();

            if (!_hasError)
            {
                _entities = new JeedomEntities(this);

               if (_entities.Loaded)
                {
                    _loaded = true;
                }
               else
                {
                    _loaded = false;
                }
            }
            else
            {
                this._loaded = false;
            }
        }

        /// <summary>
        /// Reinitialise the jeedom variables
        /// </summary>
        public void Reload()
        {
            Load();
        }

        /// <summary>
        /// Get the Jeedom version
        /// </summary>
        /// <returns>Jeedom version</returns>
        private void getVersion()
        {
            RPCCommand rpc = new RPCCommand(this, "version");

            if (rpc.Execute())
            {
                JObject googleSearch = JObject.Parse(rpc.Response);

                IEnumerable<JToken> results = googleSearch["result"];

                if (results != null)
                {
                    _hasError = false;
                    _version = results.ToString();
                }
                else
                {
                    _hasError = true;
                    _error = rpc.Error;
                }
            }
            else
            {
                _hasError = true;
                _error = rpc.Error;
            }
        }

        public string Scenario(int id, ScenarioType scenario)
        {
            string action = "";

            switch (scenario)
            {
                case ScenarioType.Disable:
                    action = "deactivate";
                    break;

                case ScenarioType.Enable:
                    action = "activate";
                    break;

                case ScenarioType.Start:
                    action = "start";
                    break;

                case ScenarioType.Stop:
                    action = "stop";
                    break;
            }

            Dictionary<string, object> command = new Dictionary<string, object>()
            {
                { "apikey", _api_key },
                { "type", "scenario" },
                { "action", action },
                { "id", id }
            };

            HTTPQuery query = new HTTPQuery(this, command);

            if (query.Execute())
                return query.Response;
            else
                return "";
        }

        public string Command(int id)
        {
            Dictionary<string, object> command = new Dictionary<string, object>()
            {
                { "apikey", _api_key },
                { "type", "cmd" },
                { "id", id }
            };

            HTTPQuery query = new HTTPQuery(this, command);

            if (query.Execute())
                return query.Response;
            else
                return "";
        }
    }
}
