using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using JeedomDotNet.Core;
using JeedomDotNet.Entities;

namespace JeedomDotNet
{
    public class Jeedom
    {
        public Plugins Plugins;
        public Commands Commands;
        public Messages Messages;
        public EqLogics EqLogics;
        public Objects Objects;

        public enum ScenarioType
        {
            Start,
            Stop,
            Enable,
            Disable
        }

        /// <summary>
        /// Jeedom URL generated by the library
        /// </summary>
        public string URL
        {
            get { return this._url; }
        }

        /// <summary>
        /// IP adress or domain name
        /// </summary>
        public string Host
        {
            get { return this._host; }
            set {
                this._host = value;
                this.Reload();
               }
        }

        /// <summary>
        /// Port used for Jeedom connection
        /// Standard port is 80 for HTTP and 443 for HTTPS
        /// </summary>
        public int Port
        {
            get { return this._port; }
            set {
                this._port = value;
                this.Reload();
            }
        }

        /// <summary>
        /// The API key generated by Jeedom
        /// </summary>
        public string API_Key
        {
            get { return this._api_key; }
            set { this._api_key = value; }
        }

        /// <summary>
        /// Specify if Jeedom is accessible trough a HTTPS connection
        /// </summary>
        public bool UseSSL
        {
            get { return this._usessl; }
            set {
                this._usessl = value;
                this.Reload();
            }
        }

        /// <summary>
        /// Disable SSL certificate verification when it is self-signed
        /// Works only with UseSSL defined to true
        /// </summary>
        public bool AllowSelfSignedCertificate
        {
            get { return this._allowSelfSignedCert; }
            set {
                this._allowSelfSignedCert = value; }
        }

        private string _url;
        private string _host;
        private int _port;
        private string _api_key;
        private bool _usessl;
        private bool _allowSelfSignedCert;
        private string _path = "";

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, string apiKey, bool usessl = false, bool allow_self_signed_cert = false)
        {
            this._host = host;
            this._api_key = apiKey;
            this._usessl = usessl;
            this._allowSelfSignedCert = allow_self_signed_cert;

            if (this._usessl)
                this._port = 443;
            else
                this._port = 80;

            this.Init();
        }

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="path">Additionnal path on the Jeedom server</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, string path, string apiKey, bool usessl = false, bool allow_self_signed_cert = false)
        {
            this._host = host;
            this._api_key = apiKey;
            this._usessl = usessl;
            this._path = path;
            this._allowSelfSignedCert = allow_self_signed_cert;

            if (this._usessl)
                this._port = 443;
            else
                this._port = 80;

            this.Init();
        }

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="port">Port used for Jeedom connection
        /// Standard port is 80 for HTTP and 443 for HTTPS</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, int port, string apiKey, bool usessl = false, bool allow_self_signed_cert = false)
        {
            this._host = host;
            this._port = port;
            this._api_key = apiKey;
            this._usessl = usessl;
            this._allowSelfSignedCert = allow_self_signed_cert;

            this.Init();
        }

        /// <summary>
        /// Entry point of the Jeedom API
        /// </summary>
        /// <param name="host">IP adress or domain name</param>
        /// <param name="path">Additionnal path on the Jeedom server</param>
        /// <param name="port">Port used for Jeedom connection
        /// Standard port is 80 for HTTP and 443 for HTTPS</param>
        /// <param name="apiKey">The API key generated by Jeedom</param>
        /// <param name="usessl">Specify if Jeedom is accessible trough a HTTPS connection</param>
        /// <param name="allow_self_signed_cert">Disable SSL certificate verification when it is self-signed
        /// Works only with usessl defined to true</param>
        public Jeedom(string host, string path, int port, string apiKey, bool usessl = false, bool allow_self_signed_cert = false)
        {
            this._host = host;
            this._path = path;
            this._port = port;
            this._api_key = apiKey;
            this._usessl = usessl;
            this._allowSelfSignedCert = allow_self_signed_cert;       

            this.Init();
        }

        /// <summary>
        /// Initialise the connection string and sets up Jeedom variables
        /// </summary>
        private void Init()
        {
            _url = new UriBuilder(_usessl ? "https" : "http", _host, _port, _path + "/core/api/jeeApi.php").ToString();

            this.Commands = new Commands(this);
            this.Plugins = new Plugins(this);
            this.Messages = new Messages(this);
            this.EqLogics = new EqLogics(this);
            this.Objects = new Objects(this);
        }

        /// <summary>
        /// Reinitialise the jeedom variables
        /// </summary>
        public void Reload()
        {
            this.Init();
        }

        /// <summary>
        /// Send a ping to the Jeedom controler
        /// </summary>
        /// <returns>True if Jeedom answers
        /// If not false</returns>
        public bool Ping()
        {
            Core.RPCCommand rpc = new Core.RPCCommand(this, "ping");

            if (rpc.Send())
            {
                JObject googleSearch = JObject.Parse(rpc.Response);

                IEnumerable<JToken> results = googleSearch["result"];

                return (results.ToString() == "pong");
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Get the Jeedom version
        /// </summary>
        /// <returns>Jeedom version</returns>
        public string GetVersion()
        {
            Core.RPCCommand rpc = new Core.RPCCommand(this, "version");

            if (rpc.Send())
            {
                JObject googleSearch = JObject.Parse(rpc.Response);

                IEnumerable<JToken> results = googleSearch["result"];

                return results.ToString();
            }
            else
            {
                return string.Empty;
            }
        }

        public string Scenario(int id, ScenarioType scenario)
        {
            string action = "";

            switch (scenario)
            {
                case ScenarioType.Disable:
                    action = "deactivate";
                    break;

                case ScenarioType.Enable:
                    action = "activate";
                    break;

                case ScenarioType.Start:
                    action = "start";
                    break;

                case ScenarioType.Stop:
                    action = "stop";
                    break;
            }

            Dictionary<string, object> command = new Dictionary<string, object>()
            {
                { "apikey", this.API_Key },
                { "type", "scenario" },
                { "action", action },
                { "id", id }
            };

            HTTPQuery query = new HTTPQuery(this, command);

            if (query.Send())
                return query.Response;
            else
                return "";
        }

        public string Command(int id)
        {
            Dictionary<string, object> command = new Dictionary<string, object>()
            {
                { "apikey", this.API_Key },
                { "type", "cmd" },
                { "id", id }
            };

            HTTPQuery query = new HTTPQuery(this, command);

            if (query.Send())
                return query.Response;
            else
                return "";
        }
    }
}
